// <auto-generated />
using System;
using APBDprojekt.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APBDprojekt.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240627115547_creating tables")]
    partial class creatingtables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APBDprojekt.Models.AppUserModel", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hashed");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("salt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APBDprojekt.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientPK");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("Has5PercentDiscount")
                        .HasColumnType("bit")
                        .HasColumnName("has5PercentDiscount");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("telephoneNumber");

                    b.HasKey("ClientId");

                    b.ToTable("Client", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("APBDprojekt.Models.Contract", b =>
                {
                    b.Property<int>("ContracId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractPK");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContracId"));

                    b.Property<decimal>("AlreadyPaid")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("alreadyPaid");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFK");

                    b.Property<string>("CurrentSoftwareVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("currentSoftwareVersion");

                    b.Property<DateTime>("EndOfSupport")
                        .HasColumnType("datetime2")
                        .HasColumnName("endOfSupport");

                    b.Property<DateTime>("PaymentEndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("paymentEndTime");

                    b.Property<DateTime>("PaymentStartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("paymentStartTime");

                    b.Property<decimal>("PriceWithDiscounts")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("priceWithDiscounts");

                    b.Property<bool>("Signed")
                        .HasColumnType("bit")
                        .HasColumnName("signed");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("SoftwareFK");

                    b.HasKey("ContracId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("APBDprojekt.Models.ContractPayment", b =>
                {
                    b.Property<int>("ContractPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContractPaymentPK");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractPaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFK");

                    b.Property<int>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("ContractFK");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfPayment");

                    b.HasKey("ContractPaymentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractPayment");
                });

            modelBuilder.Entity("APBDprojekt.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiscountPK");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateFrom");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateTo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("PercentValue")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("percentValue");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("SoftwareFK");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("DiscountId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Discount");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            DateFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Student",
                            PercentValue = 50.0m,
                            SoftwareId = 1,
                            Type = "contract"
                        },
                        new
                        {
                            DiscountId = 2,
                            DateFrom = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sale",
                            PercentValue = 30.0m,
                            SoftwareId = 1,
                            Type = "contract"
                        },
                        new
                        {
                            DiscountId = 3,
                            DateFrom = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Summer",
                            PercentValue = 80.0m,
                            SoftwareId = 1,
                            Type = "contract"
                        });
                });

            modelBuilder.Entity("APBDprojekt.Models.LogTokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("toData");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("FK_userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("APBDprojekt.Models.Software", b =>
                {
                    b.Property<int>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SoftwarePk");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwareId"));

                    b.Property<bool>("CanBuy")
                        .HasColumnType("bit")
                        .HasColumnName("canBuy");

                    b.Property<bool>("CanSubscribe")
                        .HasColumnType("bit")
                        .HasColumnName("canSubscribe");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("CurrentVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("currentVersion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("purchasePrice");

                    b.Property<decimal?>("SubscriptionPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("subscriptionPrice");

                    b.HasKey("SoftwareId");

                    b.ToTable("Software");

                    b.HasData(
                        new
                        {
                            SoftwareId = 1,
                            CanBuy = true,
                            CanSubscribe = false,
                            Category = "contract",
                            CurrentVersion = "1.0",
                            Description = "C#",
                            Name = "Rider",
                            PurchasePrice = 1000m
                        });
                });

            modelBuilder.Entity("APBDprojekt.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionPK");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientFK");

                    b.Property<string>("CurrentSoftwareVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("currentSoftwareVersion");

                    b.Property<decimal>("PriceWithDiscounts")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("priceWithDiscounts");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("SoftwareFK");

                    b.Property<DateTime>("SubscriptionEndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("subscriptionEndTime");

                    b.Property<DateTime>("SubscriptionStartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("subscriptionStartTime");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("APBDprojekt.Models.ClientCompany", b =>
                {
                    b.HasBaseType("APBDprojekt.Models.Client");

                    b.Property<string>("KRS")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("KRS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.ToTable("ClientCompany", (string)null);
                });

            modelBuilder.Entity("APBDprojekt.Models.ClientPerson", b =>
                {
                    b.HasBaseType("APBDprojekt.Models.Client");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PeselNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("peselNumber");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.ToTable("ClientPerson", (string)null);
                });

            modelBuilder.Entity("APBDprojekt.Models.Contract", b =>
                {
                    b.HasOne("APBDprojekt.Models.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APBDprojekt.Models.Software", "Software")
                        .WithMany("Contracts")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("APBDprojekt.Models.ContractPayment", b =>
                {
                    b.HasOne("APBDprojekt.Models.Client", "Client")
                        .WithMany("ContractPayments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APBDprojekt.Models.Contract", "Contract")
                        .WithMany("ContractPayments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("APBDprojekt.Models.Discount", b =>
                {
                    b.HasOne("APBDprojekt.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Software");
                });

            modelBuilder.Entity("APBDprojekt.Models.LogTokenModel", b =>
                {
                    b.HasOne("APBDprojekt.Models.AppUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APBDprojekt.Models.Subscription", b =>
                {
                    b.HasOne("APBDprojekt.Models.Client", "Client")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APBDprojekt.Models.Software", "Software")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("APBDprojekt.Models.ClientCompany", b =>
                {
                    b.HasOne("APBDprojekt.Models.Client", null)
                        .WithOne()
                        .HasForeignKey("APBDprojekt.Models.ClientCompany", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APBDprojekt.Models.ClientPerson", b =>
                {
                    b.HasOne("APBDprojekt.Models.Client", null)
                        .WithOne()
                        .HasForeignKey("APBDprojekt.Models.ClientPerson", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APBDprojekt.Models.Client", b =>
                {
                    b.Navigation("ContractPayments");

                    b.Navigation("Contracts");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("APBDprojekt.Models.Contract", b =>
                {
                    b.Navigation("ContractPayments");
                });

            modelBuilder.Entity("APBDprojekt.Models.Software", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
